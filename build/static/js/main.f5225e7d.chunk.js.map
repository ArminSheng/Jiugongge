{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","questions","useState","cells","setCells","doShuffle","res","s","Set","size","length","i","parseInt","Math","random","add","Array","from","shuffle","map","q","content","fliped","console","log","useEffect","className","style","textAlign","onClick","c","idx","key","concat","display","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,oHCiF5BC,MA7Ef,WACE,IAAMC,EAAY,CAChB,mIACA,+GACA,mFACA,wHACA,kLAEA,uNACA,+OACA,gJACA,gOAXW,EAeaC,mBAAS,IAftB,mBAeNC,EAfM,KAeCC,EAfD,KA0BPC,EAAY,WAChB,IAAMC,EAVQ,WAEd,IADA,IAAMC,EAAI,IAAIC,IACRD,EAAEE,KAAOR,EAAUS,QAAQ,CAC/B,IAAIC,EAAIC,SAAyB,EAAhBC,KAAKC,UACtBP,EAAEQ,IAAId,EAAUU,IAElB,OAAOK,MAAMC,KAAKV,GAINW,GAAUC,KAAI,SAAAC,GAAC,MAAK,CAACC,QAASD,EAAGE,QAAQ,MACrDlB,EAASE,GACTiB,QAAQC,IAAIrB,EAAOG,IAWrB,OAFAmB,oBAAUpB,EAAW,IAGnB,yBAAKqB,UAAU,OACb,yBAAKA,UAAU,cAab,uBAAGC,MAAO,CAACC,UAAW,WAAtB,iCACE,4BAAQC,QAASxB,GAAjB,UAEF,yBAAKqB,UAAU,kBAEXvB,EAAMgB,KAAI,SAACW,EAAGC,GAAJ,OACR,yBAAKC,IAAKD,EAAKL,UAAW,aAAgBI,EAAER,OAAmB,GAAV,UACnD,yBAAKI,UAAU,YAAYG,QAAS,kBA7BnClB,EA6BgDmB,GA5B3DR,QAAUX,EAAEW,YACdlB,EAASD,EAAM8B,UAFF,IAAAtB,IA8BC,0BAAMgB,MAAO,CAACO,QAASJ,EAAER,OAAS,OAAS,QAASa,MAAO,SAAUJ,EAAM,GAC3E,0BAAMJ,MAAO,CAACO,QAAUJ,EAAER,OAAkB,QAAT,OAAkBa,MAAO,SACzDJ,EAAM,EADT,KACcD,EAAET,kBCzDde,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.f5225e7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const questions = [\n    '关于自己的3个标签，并给出标签的故事/原因吧！',\n    '关于自己最喜欢的一首歌，并讲原因吧！',\n    '关于自己现在工作/生活状态吧!',\n    '聊聊最近让自己很开心 / 很难过的一件事吧！',\n    '展示最近自己拍的很满意的照片，可以是场景/人物，讲讲原因吧！',\n\n    '请CP简单描述下现在所在的环境吧！（比如：我现在正坐在星巴克里等我的咖啡）',\n    '请CP把最近的一条朋友圈截图给你看吧！（如果涉及隐私可以换一条和自己相关的朋友圈）',\n    '请CP讲讲最近下班/下课后，休闲时间喜欢做的事情吧！',\n    '请向CP提一个你想了解的任意问题吧！（注意分寸，不要让刚刚认识的CP感到为难哦）'\n  ];\n  // const _cells = questions.map(q => ({content: q, fliped: false}));\n\n  const [cells, setCells] = useState([]);\n\n  const shuffle = () => {\n    const s = new Set();\n    while(s.size < questions.length) {\n      let i = parseInt(Math.random() * 9);\n      s.add(questions[i]);\n    }\n    return Array.from(s);\n  }\n\n  const doShuffle = () => {\n    const res = shuffle().map(q => ({content: q, fliped: false}));\n    setCells(res);\n    console.log(cells, res);\n  }\n\n\n  const onFlip = i => {\n    i.fliped = !i.fliped;\n    setCells(cells.concat());\n  }\n\n  useEffect(doShuffle, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <p style={{textAlign: \"center\"}}>冲关九宫格 \n          <button onClick={doShuffle}>Start</button>\n        </p>\n        <div className=\"flex-container\">\n          {\n            cells.map((c, idx) => \n              <div key={idx} className={'flex-cell' + (!c.fliped ? ' flip' : '')}>\n                <div className=\"flex-item\" onClick={() => onFlip(c)}>\n                  <span style={{display: c.fliped ? 'none' : 'block', color: '#fff'}}>{idx + 1}</span>\n                  <span style={{display: !c.fliped ? 'none' : 'block', color: '#fff'}}>\n                    {idx + 1}. {c.content}\n                    </span>\n                </div>\n              </div>\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}